<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular 2&#43; on sundarcodes</title>
    <link>/tags/angular-2&#43;/</link>
    <description>Recent content in Angular 2&#43; on sundarcodes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/angular-2+/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>State Management in Angular 2&#43; apps - Part 1</title>
      <link>/post/ui-state-management-part-1/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/ui-state-management-part-1/</guid>
      <description>This is part-1 of the blog series where I would be trying to explain state management in Angular 2+ app using different strategies along with their pros and cons.
In this part, I will try to demystify the term state, how to identify state and why do we need to manage state. So lets get started&amp;hellip;
How do you define state or what is state of an app ? I have seen junior developers who just have Angular(1 &amp;amp; 2+) background struggle to answer this question as they haven&amp;rsquo;t encountered the term state while building apps.</description>
    </item>
    
  </channel>
</rss>