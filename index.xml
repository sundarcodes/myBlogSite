<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sundarcodes</title>
    <link>/</link>
    <description>Recent content on sundarcodes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>State Management in Angular 2&#43; apps - Part 6 - Conclusion</title>
      <link>/post/ui-state-management-part-6/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/ui-state-management-part-6/</guid>
      <description>Over the last 5 posts in this series, we have seen various ways of managing state in a Angular application. In this post, we would conclude by giving some pointers on which technique to choose based on the use cases.
When to go for a Service based approach ? This is most easiest and the simplest approach to share/manage data across components/pages in your App. But this could quickly go haywire if not used in the right way and with proper encapsulation techniques.</description>
    </item>
    
    <item>
      <title>State Management in Angular 2&#43; apps - Part 5</title>
      <link>/post/ui-state-management-part-5/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/ui-state-management-part-5/</guid>
      <description>In this post of our series in state management, we will be seeing how we can solve our state problem using a solution called Redux. We will be use the angular variant of Redux called ngRx.
Redux has been inspired by elm and Flux. Elm is a pure functional programming language used for developing the front end of modern day web apps. Flux is a stage management solution. If this is first time you are hearing about Redux, please do watch these videos from the co-creator of Redux, Dan Abramov.</description>
    </item>
    
    <item>
      <title>State Management in Angular 2&#43; apps - Part 4</title>
      <link>/post/ui-state-management-part-4/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/ui-state-management-part-4/</guid>
      <description>In part-1 of this series, we got to know what state is and the need to have a state management solution especially in the case of a large web app. In this post, we will be seeing how we can solve our shared state problem using a solution called Mobx.
Mobx is a non-opionated state management technique which again uses concepts of observable that we had seen in part-3. You could say mobx is a wrapper built on top of observables and does lot of magic under the hood.</description>
    </item>
    
    <item>
      <title>State Management in Angular 2&#43; apps - Part 3</title>
      <link>/post/ui-state-management-part-3/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/ui-state-management-part-3/</guid>
      <description>In part-1 of this series, we got to know what state is and the need to have a state management solution especially in the case of a large web app. In this post, we will be seeing how we can solve our shared state problem using Observables. We will also see how we can overcome the pitfalls of the Angular services approach discussed in part-2 of this series.
Observables is something that I have seen which unsettles developers.</description>
    </item>
    
    <item>
      <title>State Management in Angular 2&#43; apps - Part 2</title>
      <link>/post/ui-state-management-part-2/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/ui-state-management-part-2/</guid>
      <description>In part-1 of this series, we got to know what state is and the need to have a state management solution especially in the case of a large web app. In this post, we will be seeing how we can solve our shared state problem using plain Angular services.
In the last post we identified that the good reads collection is the data that is being shared by the home component and the navbar component.</description>
    </item>
    
    <item>
      <title>State Management in Angular 2&#43; apps - Part 1</title>
      <link>/post/ui-state-management-part-1/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/ui-state-management-part-1/</guid>
      <description>This is part-1 of the blog series where I would be trying to explain state management in Angular 2+ app using different strategies along with their pros and cons.
In this part, I will try to demystify the term state, how to identify state and why do we need to manage state. So lets get started&amp;hellip;
How do you define state or what is state of an app ? I have seen junior developers who just have Angular(1 &amp;amp; 2+) background struggle to answer this question as they haven&amp;rsquo;t encountered the term state while building apps.</description>
    </item>
    
    <item>
      <title>A-Z of JavaScript</title>
      <link>/post/a-z-of-javascript/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/a-z-of-javascript/</guid>
      <description>This is my collection of A-to-Z terms that one should know if they are into serious javascript programming.
Async/Await Async and Await are new features introduced in the language to make asynchronous code block look synchronous and more importantly make it more readable.
Brendan Eich Brendan Eich is the creator of JavaScript. He created the language in a matter of 10 days when working for Netscape Navigator. Due credit to be given to him for creating this language.</description>
    </item>
    
    <item>
      <title>Front End development Analogy</title>
      <link>/post/front-end-analogies/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/front-end-analogies/</guid>
      <description>Whenever we learn about some topics or if you are teaching someone, I always felt analogies from day to day life makes a greater impact to a person&amp;rsquo;s understanding. This post is my take on analogy of technologies/terminologies/people involved in front end development.
I am going to compare building a website to building a house where :
HTML(HyperText Markup Language) would be the raw building materials namely bricks, steels, cement.</description>
    </item>
    
    <item>
      <title>Git workflow - my ramblings</title>
      <link>/post/git-workflow/</link>
      <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/git-workflow/</guid>
      <description>In this post, I would be talking about the git workflow that could be adopted when you are working on a project all alone and also when you are working in a team. Before we start, lets try to understand what is Git and why it is becoming the leader in Version control/SCM (Software Configuration Management).
What is Git ? Git is a version control system with a de-centralized approach to source control.</description>
    </item>
    
    <item>
      <title>Difference between AngularJS and Angular</title>
      <link>/post/angularjs-vs-angular/</link>
      <pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/angularjs-vs-angular/</guid>
      <description>Angular the framework as this is what the Angular team would like to call, has evolved(and evolving) from being the most popular front end JavaScript framework over the last 5 years to a framework that has transformed itself to survive and be a leader for years to come. All references to Angular points to the version 2 and above and AngularJS means Angular 1.x.
In this post, we would be seeing how different is Angular and what are the new additions it is bringing to the world of Single Page App development.</description>
    </item>
    
  </channel>
</rss>